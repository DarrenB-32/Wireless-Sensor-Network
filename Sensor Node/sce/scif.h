/** \mainpage Driver Overview
  *
  * \section section_drv_info Driver Information
  * This Sensor Controller Interface driver has been generated by the Texas Instruments Sensor Controller
  * Studio tool:
  * - <b>Project name</b>:     MPU6050 for CC2650
  * - <b>Project file</b>:     C:/Users/DBrad/OneDrive/Desktop/FYP/scsmpu60.scp
  * - <b>Code prefix</b>:      -
  * - <b>Operating system</b>: TI-RTOS
  * - <b>Tool version</b>:     2.8.0.170
  * - <b>Tool patches</b>:     None
  * - <b>Target chip</b>:      CC2650, package QFN48 7x7 RGZ, revision -
  * - <b>Created</b>:          2021-04-05 17:01:24.376
  * - <b>Computer</b>:         DESKTOP-89U724I
  * - <b>User</b>:             DBrad
  *
  * No user-provided resource definitions were used to generate this driver.
  *
  * No user-provided procedure definitions were used to generate this driver.
  *
  * Do not edit the generated source code files other than temporarily for debug purposes. Any
  * modifications will be overwritten by the Sensor Controller Studio when generating new output.
  *
  * \section section_drv_modules Driver Modules
  * The driver is divided into three modules:
  * - \ref module_scif_generic_interface, providing the API for:
  *     - Initializing and uninitializing the driver
  *     - Task control (for starting, stopping and executing Sensor Controller tasks)
  *     - Task data exchange (for producing input data to and consume output data from Sensor Controller
  *       tasks)
  * - \ref module_scif_driver_setup, containing:
  *     - The AUX RAM image (Sensor Controller code and data)
  *     - I/O mapping information
  *     - Task data structure information
  *     - Driver setup data, to be used in the driver initialization
  *     - Project-specific functionality
  * - \ref module_scif_osal, for flexible OS support:
  *     - Interfaces with the selected operating system
  *
  * It is possible to use output from multiple Sensor Controller Studio projects in one application. Only
  * one driver setup may be active at a time, but it is possible to switch between these setups. When
  * using this option, there is one instance of the \ref module_scif_generic_interface and
  * \ref module_scif_osal modules, and multiple instances of the \ref module_scif_driver_setup module.
  * This requires that:
  * - The outputs must be generated using the same version of Sensor Controller Studio
  * - The outputs must use the same operating system
  * - The outputs must use different source code prefixes (inserted into all globals of the
  *   \ref module_scif_driver_setup)
  *
  *
  * \section section_project_info Project Description
  * No description entered
  *
  *
  * \subsection section_io_mapping I/O Mapping
  * Task I/O functions are mapped to the following pins:
  * - MPU6050 Sample:
  *     - <b>I2C SCL</b>: DIO4
  *     - <b>I2C SDA</b>: DIO5
  *
  *
  * \section section_task_info Task Description(s)
  * This driver supports the following task(s):
  *
  *
  * \subsection section_task_desc_mpu6050_sample MPU6050 Sample
  * No description entered
  *
  */




/** \addtogroup module_scif_driver_setup Driver Setup
  *
  * \section section_driver_setup_overview Overview
  *
  * This driver setup instance has been generated for:
  * - <b>Project name</b>:     MPU6050 for CC2650
  * - <b>Code prefix</b>:      -
  *
  * The driver setup module contains the generated output from the Sensor Controller Studio project:
  * - Location of task control and scheduling data structures in AUX RAM
  * - The AUX RAM image, and the size the image
  * - Task data structure information (location, size and buffer count)
  * - I/O pin mapping translation table
  * - Task resource initialization and uninitialization functions
  * - Hooks for run-time logging
  *
  * @{
  */
#ifndef SCIF_H
#define SCIF_H

#include <stdint.h>
#include <stdbool.h>
#include "scif_framework.h"
#include "scif_osal_tirtos.h"


/// Target chip name
#define SCIF_TARGET_CHIP_NAME_CC2650
/// Target chip package
#define SCIF_TARGET_CHIP_PACKAGE_QFN48_7X7_RGZ

/// Number of tasks implemented by this driver
#define SCIF_TASK_COUNT 1

/// MPU6050 Sample: Task ID
#define SCIF_MPU6050_SAMPLE_TASK_ID 0


/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_ACCEL_RANGE_8 16
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_ACCEL_XH_OUT 59
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_ACCEL_XL_OUT 60
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_ACCEL_YH_OUT 61
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_ACCEL_YL_OUT 62
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_ACCEL_ZH_OUT 63
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_ACCEL_ZL_OUT 64
/// MPU6050 Sample: MPU 6050 i2c address shifted 1 bit to the left
#define SCIF_MPU6050_SAMPLE_BOARD_MPU6050_ADDR 208
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_FILTER_BANDWIDTH_21HZ 4
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_GYRO_RANGE_500 8
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_GYRO_XH_OUT 67
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_MPU6050_ACCEL_CONFIG 28
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_MPU6050_CONFIG 26
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_MPU6050_GYRO_CONFIG 27
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_MPU6050_PWR_MGMT_1 107
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_PWR_MGMT_1_RESET 64
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_PWR_MGMT_1_WAKE 0
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_SIGNAL_PATH_RESET 104
/// MPU6050 Sample: 
#define SCIF_MPU6050_SAMPLE_SIGNAL_PATH_RESET_ALL 7
/// MPU6050 Sample I/O mapping: I2C SCL
#define SCIF_MPU6050_SAMPLE_DIO_I2C_SCL 4
/// MPU6050 Sample I/O mapping: I2C SDA
#define SCIF_MPU6050_SAMPLE_DIO_I2C_SDA 5


// All shared data structures in AUX RAM need to be packed
#pragma pack(push, 2)


/// MPU6050 Sample: Task output data structure
typedef struct {
    int16_t  gx; ///< 
    int16_t  gy; ///< 
    int16_t  gz; ///< 
    int16_t  x;  ///< 
    int16_t  y;  ///< 
    int16_t  z;  ///< 
} SCIF_MPU6050_SAMPLE_OUTPUT_T;


/// MPU6050 Sample: Task state structure
typedef struct {
    uint16_t i2cStatus; ///< I2C master status
} SCIF_MPU6050_SAMPLE_STATE_T;


/// Sensor Controller task data (configuration, input buffer(s), output buffer(s) and internal state)
typedef struct {
    struct {
        SCIF_MPU6050_SAMPLE_OUTPUT_T output;
        SCIF_MPU6050_SAMPLE_STATE_T state;
    } mpu6050Sample;
} SCIF_TASK_DATA_T;

/// Sensor Controller task generic control (located in AUX RAM)
#define scifTaskData    (*((volatile SCIF_TASK_DATA_T*) 0x400E00EA))


// Initialized internal driver data, to be used in the call to \ref scifInit()
extern const SCIF_DATA_T scifDriverSetup;


// Restore previous struct packing setting
#pragma pack(pop)


// AUX I/O re-initialization functions
void scifReinitTaskIo(uint32_t bvTaskIds);


// RTC-based tick generation control
void scifStartRtcTicks(uint32_t tickStart, uint32_t tickPeriod);
void scifStartRtcTicksNow(uint32_t tickPeriod);
void scifStopRtcTicks(void);


#endif
//@}


// Generated by DESKTOP-89U724I at 2021-04-05 17:01:24.376
